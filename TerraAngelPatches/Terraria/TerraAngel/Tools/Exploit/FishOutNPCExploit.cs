using System;
using System.Linq;
using System.Runtime.CompilerServices;
using Microsoft.Xna.Framework.Input;
using TerraAngel.Net;

namespace TerraAngel.Tools.Exploit;

public class FishOutNPCExploit : Tool
{
    public override string Name => GetString("Fish Out NPC Exploit");
    public override ToolTabs Tab => ToolTabs.MiscTools;

    public float SendTimer;

    public static readonly int[] FishableNpcIDs =
    [
        NPCID.EyeballFlyingFish,
        NPCID.ZombieMerman,
        NPCID.GoblinShark,
        NPCID.BloodEelHead,
        NPCID.BloodEelBody,
        NPCID.BloodEelTail,
        NPCID.BloodNautilus,
        NPCID.TownSlimeRed
    ];

    public enum FishableNpcIdEnum
    {
        EyeballFlyingFish,
        ZombieMerman,
        GoblinShark,
        BloodEelHead,
        BloodEelBody,
        BloodEelTail,
        BloodNautilus,
        TownSlimeRed
    }

    private static bool IsHoldingFishPole => Main.LocalPlayer.inventory[Main.LocalPlayer.selectedItem] is
        { active: true, fishingPole: > 0 };

    private static bool HasActiveBobber => Main.projectile.Any(x => x.active && x.owner == Main.myPlayer && x.bobber);

    private static string[]? _fishableNpcNames;

    private FishableNpcIdEnum _targetNpc;

    public override void DrawUI(ImGuiIOPtr io)
    {
        _fishableNpcNames ??= FishableNpcIDs.Select(id => Lang.GetNPCNameValue(id) + $"({id})").ToArray();
        
        if (ImGui.CollapsingHeader(GetString("Fish Out NPC Exploit")))
        {
            ImGui.Text(GetString("Press L to spawn"));
            if (IsHoldingFishPole)
            {
                ImGui.PushStyleColor(ImGuiCol.Text, Color.LimeGreen.PackedValue);
                ImGui.Text(GetString("Holding a fish pole!"));
                ImGui.PopStyleColor();
            }
            else
            {
                ImGui.PushStyleColor(ImGuiCol.Text, Color.Crimson.PackedValue);
                ImGui.Text(GetString("NOT holding a fish pole!"));
                ImGui.PopStyleColor();
            }
            if (HasActiveBobber)
            {
                ImGui.PushStyleColor(ImGuiCol.Text, Color.LimeGreen.PackedValue);
                ImGui.Text(GetString("Has active bobber!"));
                ImGui.PopStyleColor();
            }
            else
            {
                ImGui.PushStyleColor(ImGuiCol.Text, Color.Crimson.PackedValue);
                ImGui.Text(GetString("DOESN'T HAVE active bobber!"));
                ImGui.PopStyleColor();
            }

            ImGui.Combo("##SpawnNPCType", ref Unsafe.As<FishableNpcIdEnum, int>(ref _targetNpc), _fishableNpcNames,
                _fishableNpcNames.Length);
        }
    }

    public override void Update()
    {
        SendTimer -= Time.DrawDeltaTime;
        if (SendTimer > 0.0f)
            return;
        SendTimer = 0.01f;

        if (!IsHoldingFishPole || !HasActiveBobber)
            return;
        if (!InputSystem.IsKeyDown(Keys.L))
            return;

        var targetPos = (Util.ScreenToWorldWorld(InputSystem.MousePosition) / 16f).Floor();
        NetMessage.SendData(MessageID.FishOutNPC, number: (int)targetPos.X, number2: (int)targetPos.Y,
            number3: FishableNpcIDs[(int)_targetNpc]);
    }
}