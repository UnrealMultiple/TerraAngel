--- src/Terraria/Terraria/Main.cs
+++ src/TerraAngel/Terraria/Main.cs
@@ -3,7 +_,6 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
-using System.Drawing;
 using System.IO;
 using System.Linq;
 using System.Reflection;
@@ -12,7 +_,6 @@
 using System.Text.RegularExpressions;
 using System.Threading;
 using System.Threading.Tasks;
-using System.Windows.Forms;
 using Microsoft.Win32;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Content;
@@ -24,7 +_,6 @@
 using ReLogic.Graphics;
 using ReLogic.Localization.IME;
 using ReLogic.OS;
-using ReLogic.Peripherals.RGB;
 using ReLogic.Utilities;
 using Terraria.Achievements;
 using Terraria.Audio;
@@ -208,8 +_,6 @@
     public static bool CaptureModeDisabled = false;
     public bool unityMouseOver;
     public static Main instance;
-    public static ChromaEngine Chroma;
-    public static ChromaHotkeyPainter ChromaPainter;
     public static Camera Camera = new Camera();
     public static IPlayerRenderer PlayerRenderer = new LegacyPlayerRenderer();
     public static IPlayerRenderer PotionOfReturnRenderer = new ReturnGatePlayerRenderer();
@@ -395,8 +_,8 @@
     public static string defaultIP = "";
     public static int dayRate = 1;
     public static int desiredWorldTilesUpdateRate = 1;
-    public static int maxScreenW = 1920;
+    public static int maxScreenW = 3480;
-    public static int maxScreenH = 1200;
+    public static int maxScreenH = 2160;
     public static int minScreenW = 800;
     public static int minScreenH = 600;
     public static float iS = 1f;
@@ -714,7 +_,8 @@
     public static float invAlpha = 1f;
     public static float invDir = 1f;
     [ThreadStatic]
-    public static UnifiedRandom rand;
+    public static UnifiedRandom _rand;
+    public static UnifiedRandom rand { get { if (_rand is null) { _rand = new UnifiedRandom(); } return _rand; } set { _rand = value; } }
     public static bool allChestStackHover;
     public static bool inventorySortMouseOver;
     public static float GraveyardVisualIntensity;
@@ -858,7 +_,7 @@
     public static HairstyleUnlocksHelper Hairstyles = new HairstyleUnlocksHelper();
     public static bool tilesLoaded = false;
     public static WorldMap Map;
-    public static Tile[,] tile = new Tile[maxTilesX, maxTilesY];
+    public static NativeTileMap tile = new NativeTileMap(maxTilesX, maxTilesY);
     public static Dust[] dust = new Dust[6001];
     public static Star[] star = new Star[400];
     public static Item[] item = new Item[401];
@@ -884,7 +_,6 @@
     public static int screenHeight = 864;
     public static bool screenMaximized = true;
     public static bool screenBorderless = true;
-    public static int screenBorderlessPendingResizes;
     public static int teamNamePlateDistance = 2000;
     public static int multiplayerNPCSmoothingRange = 300;
     public static bool Setting_UseReducedMaxLiquids = false;
@@ -960,10 +_,10 @@
     public static WorkshopPublishingIndicator WorkshopPublishingIndicator = new WorkshopPublishingIndicator();
     public static IssueReportsIndicator IssueReporterIndicator = new IssueReportsIndicator();
     public static bool Support4K = true;
-    public static float MinimumZoomComparerX = 1920f;
+    public static float MinimumZoomComparerX = 3480f;
-    public static float MinimumZoomComparerY = 1200f;
+    public static float MinimumZoomComparerY = 2160f;
-    private static int _renderTargetMaxSize = 2048;
+    private static int _renderTargetMaxSize = 8192;
-    private static GraphicsProfile _selectedGraphicsProfile = ((!Program.IsXna) ? GraphicsProfile.HiDef : GraphicsProfile.Reach);
+    private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.HiDef;
     private static GraphicsProfile _currentGraphicsProfile = _selectedGraphicsProfile;
     public static int LogicCheckScreenWidth = 1920;
     public static int LogicCheckScreenHeight = 1200;
@@ -976,10 +_,6 @@
     private static int backSpaceCount;
     private static float backSpaceRate;
     public static string motd = "";
-    public static bool toggleFullscreen;
-    public static int numDisplayModes;
-    public static int[] displayWidth = new int[99];
-    public static int[] displayHeight = new int[99];
     public static bool gameMenu = true;
     public static bool menuBGChangedDay = false;
     public static bool menuBGChangedNight = false;
@@ -1108,7 +_,6 @@
     public List<int> DrawCacheFirstFractals = new List<int>(1000);
     public static ParticleRenderer ParticleSystem_World_OverPlayers = new ParticleRenderer();
     public static ParticleRenderer ParticleSystem_World_BehindPlayers = new ParticleRenderer();
-    private static WindowStateController _windowMover;
     public static AnchoredEntitiesCollection sittingManager;
     public static AnchoredEntitiesCollection sleepingManager;
     public static MinimapFrameManager MinimapFrameManagerInstance;
@@ -1246,7 +_,7 @@
     private static bool _blockFancyUIWhileLoading;
     private bool[] menuWide = new bool[100];
     public static float GamepadCursorAlpha = 0f;
-    private bool _needsMenuUIRecalculation;
+    public bool _needsMenuUIRecalculation;
     public static float MenuXMovement = 0f;
     public RejectionMenuInfo RejectionMenuInfo;
     private float _splashFrameCount;
@@ -1286,7 +_,7 @@
     private static TextSnippet[] _netplayStatusTextSnippets;
     public static int ladyBugRainBoost = 0;
     private static bool _canShowMeteorFall;
-    private static bool _isResizingAndRemakingTargets = false;
+    public static bool _isResizingAndRemakingTargets = false;
     public static bool CanUpdateGameplay { get; private set; }
 
     public static Vector2 ViewPosition => screenPosition + GameViewMatrix.Translation;
@@ -2508,7 +_,6 @@
         configuration.Clear();
         configuration.Put("ResetDefaultUIScale", false);
         configuration.Put("SmartCursorToggle", cSmartCursorModeIsToggleAndNotHold);
-        configuration.Put("MapEnabled", mapEnabled);
         configuration.Put("InvasionBarMode", invasionProgressMode);
         configuration.Put("AutoSave", autoSave);
         configuration.Put("AutoPause", autoPause);
@@ -2535,15 +_,14 @@
             {
                 num = LastLoadedResolution.X;
             }
-
             if (LastLoadedResolution.Y != 0)
             {
                 num2 = LastLoadedResolution.Y;
             }
         }
-
         configuration.Put("DisplayWidth", num);
         configuration.Put("DisplayHeight", num2);
+
         configuration.Put("GraphicsQuality", qaStyle);
         configuration.Put("BackgroundEnabled", BackgroundEnabled);
         configuration.Put("FrameSkipMode", FrameSkipMode);
@@ -2583,9 +_,6 @@
         configuration.Put("UIScale", _uiScaleWanted);
         configuration.Put("MapScale", MapScale);
         configuration.Put("FlashIconForEvents", Enum.GetName(typeof(GameNotificationType), _flashNotificationType));
-        configuration.Put("Display", _windowMover.ScreenDeviceName);
-        configuration.Put("DisplayScreen", _windowMover.ScreenDeviceName);
-        configuration.Put("ThrottleWhenInactive", instance.InactiveSleepTime != TimeSpan.Zero);
         configuration.Put("DoorAutoOpeningMode", DoorOpeningHelper.PreferenceSettings);
         configuration.Put("HoverControlMode", Player.Settings.HoverControl);
         configuration.Put("WaterfallDrawLimit", instance.waterfallManager.maxWaterfallCount);
@@ -2615,7 +_,7 @@
         }
     }
 
-    private static void TryPickingDefaultUIScale(float displayHeight)
+    public static void TryPickingDefaultUIScale(float displayHeight)
     {
         if (shouldSetDefaultUIScale)
         {
@@ -2658,46 +_,13 @@
             configuration.Get("WindowBorderless", ref screenBorderless);
         }
 
-        PendingBorderlessState = screenBorderless;
-        screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
-        if (Platform.IsWindows && !dedServ)
-        {
-            Form form = (Form)Control.FromHandle(instance.Window.Handle);
-            if (screenBorderless)
-            {
-                SetBorderlessFormStyle(form);
-            }
-            else if (screenMaximized)
-            {
-                form.FormBorderStyle = FormBorderStyle.Sizable;
-                form.WindowState = FormWindowState.Maximized;
-            }
-            else
-            {
-                form.FormBorderStyle = FormBorderStyle.Sizable;
-            }
-
-            form.BringToFront();
-        }
-
         int currentValue2 = graphics.PreferredBackBufferWidth;
         int currentValue3 = graphics.PreferredBackBufferHeight;
         configuration.Get("DisplayWidth", ref currentValue2);
         configuration.Get("DisplayHeight", ref currentValue3);
         LastLoadedResolution = new Microsoft.Xna.Framework.Point(currentValue2, currentValue3);
-        if (!startFullscreen)
-        {
-            if (PendingBorderlessState)
-            {
-                screenBorderlessPendingResizes = 1;
-            }
-
-            SetDisplayMode(currentValue2, currentValue3, fullscreen: false);
-            TryPickingDefaultUIScale(currentValue3);
-        }
 
         configuration.Get("SmartCursorToggle", ref cSmartCursorModeIsToggleAndNotHold);
-        configuration.Get("MapEnabled", ref mapEnabled);
         configuration.Get("InvasionBarMode", ref invasionProgressMode);
         configuration.Get("AutoSave", ref autoSave);
         configuration.Get("AutoPause", ref autoPause);
@@ -2737,34 +_,6 @@
             configuration.Get("BackgroundEnabled", ref BackgroundEnabled);
         }
 
-        if (configuration.GetAllKeys().Contains("FrameSkip"))
-        {
-            bool currentValue4 = false;
-            configuration.Get("FrameSkip", ref currentValue4);
-            terrariasFixedTiming = !currentValue4;
-            if (terrariasFixedTiming)
-            {
-                FrameSkipMode = FrameSkipMode.Subtle;
-            }
-            else
-            {
-                FrameSkipMode = FrameSkipMode.On;
-            }
-        }
-
-        int currentValue5 = (int)FrameSkipMode;
-        configuration.Get("FrameSkipMode", ref currentValue5);
-        if (currentValue5 < 0)
-        {
-            currentValue5 = 0;
-        }
-
-        if (currentValue5 > 2)
-        {
-            currentValue5 = 2;
-        }
-
-        FrameSkipMode = (FrameSkipMode)currentValue5;
         int currentValue6 = (int)Lighting.Mode;
         if (!flag)
         {
@@ -2902,14 +_,6 @@
 
         if (!flag)
         {
-            string screenDeviceName = configuration.Get("DisplayScreen", "");
-            _windowMover.TryMovingToScreen(screenDeviceName);
-            bool flag2 = configuration.Get("ThrottleWhenInactive", defaultValue: true);
-            base.InactiveSleepTime = TimeSpan.FromMilliseconds(flag2 ? 20 : 0);
-        }
-
-        if (!flag)
-        {
             configuration.Get("Support4K", ref Support4K);
         }
 
@@ -3074,14 +_,7 @@
 
                 if (num >= 91 && binaryReader.ReadBoolean() && !dedServ && Platform.IsWindows)
                 {
-                    ((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
-                }
-
-                if (num >= 4)
-                {
-                    int width = binaryReader.ReadInt32();
-                    int height = binaryReader.ReadInt32();
-                    SetDisplayMode(width, height, flag);
+                    SDL2.SDL.SDL_MaximizeWindow(base.Window.Handle);
                 }
 
                 if (num >= 8)
@@ -3154,8 +_,6 @@
                 {
                     placementPreview = binaryReader.ReadBoolean();
                 }
-
-                SetFullScreen(flag);
             }
 
             binaryReader.Close();
@@ -4644,6 +_,8 @@
             graphics = new GraphicsDeviceManager(this as Game);
             base.Content.RootDirectory = "Content";
         }
+        base.Window.AllowUserResizing = true;
+        ClientLoader.WindowManager = new WindowManager(this as Game);
     }
 
     private static void SetDisplayMonitor()
@@ -4671,7 +_,7 @@
     {
         if (!dedServ)
         {
-            _cachedTitle = Lang.GetRandomGameTitle();
+            _cachedTitle = "TerraAngel";
             Platform.Get<IWindowService>().SetUnicodeTitle(base.Window, _cachedTitle);
         }
     }
@@ -4740,7 +_,6 @@
         SetTitle();
         lo = rand.Next(6);
         waterfallManager = new WaterfallManager();
-        _windowMover = new WindowStateController();
         sittingManager = new AnchoredEntitiesCollection();
         sleepingManager = new AnchoredEntitiesCollection();
         gameTips = new GameTipsDisplay();
@@ -4783,6 +_,7 @@
         LoadContent_TryEnteringHiDef();
         ClientInitialize();
         base.Initialize();
+        ClientLoader.WindowManager?.Init();
     }
 
     private void BindSettingsTo(Preferences preferences)
@@ -4791,7 +_,6 @@
         MinimapFrameManagerInstance.BindTo(preferences);
         BigBossProgressBar.BindTo(preferences);
         ResourceSetsManager.BindTo(preferences);
-        ChromaInitializer.BindTo(preferences);
         Terraria.Graphics.Effects.Filters.Scene.BindTo(preferences);
         if (SocialAPI.Cloud != null)
         {
@@ -4972,6 +_,7 @@
             Star.SpawnStars();
             ItemSorting.SetupWhiteLists();
         }
+        ClientLoader.Initialize(this);
     }
 
     private void Initialize_Entities()
@@ -8736,8 +_,6 @@
             screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
         }
 
-        UpdateDisplaySettings();
-        graphics.ApplyChanges();
         if (Main.OnResolutionChanged != null)
         {
             Main.OnResolutionChanged(new Vector2(screenWidth, screenHeight));
@@ -8756,9 +_,6 @@
         _achievementAdvisor = new AchievementAdvisor();
         OpenRecent();
         UILinksInitializer.Load();
-        Chroma = new ChromaEngine();
-        ChromaPainter = new ChromaHotkeyPainter();
-        ChromaPainter.CollectBoundKeys();
         CacheSupportedDisplaySizes();
         if (autoJoin)
         {
@@ -8772,31 +_,10 @@
 
     private static void CacheSupportedDisplaySizes()
     {
-        numDisplayModes = 0;
-        foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
-        {
-            if (supportedDisplayMode.Width < minScreenW || supportedDisplayMode.Height < minScreenH || supportedDisplayMode.Width > maxScreenW || supportedDisplayMode.Height > maxScreenH)
-            {
-                continue;
-            }
-
-            bool flag = true;
-            for (int i = 0; i < numDisplayModes; i++)
-            {
-                if (supportedDisplayMode.Width == displayWidth[i] && supportedDisplayMode.Height == displayHeight[i])
-                {
-                    flag = false;
-                    break;
-                }
-            }
-
-            if (flag)
-            {
-                displayHeight[numDisplayModes] = supportedDisplayMode.Height;
-                displayWidth[numDisplayModes] = supportedDisplayMode.Width;
-                numDisplayModes++;
-            }
-        }
+        SDL2.SDL.SDL_GetDisplayBounds(SDL2.SDL.SDL_GetWindowDisplayIndex(Main.instance.Window.Handle), out SDL2.SDL.SDL_Rect bounds);
+
+        Main.maxScreenW = bounds.w;
+        Main.maxScreenH = bounds.h;
     }
 
     public static void LoadTestLog(string logname)
@@ -8819,6 +_,7 @@
         Assets = base.Services.Get<IAssetRepository>();
         Assets.AssetLoadFailHandler = OnceFailedLoadingAnAsset;
         mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
+        base.Content.RootDirectory = ClientLoader.ContentFolder;
         ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
         PixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
         VertexPixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
@@ -8847,7 +_,6 @@
 
         AssetSourceController.UseResourcePacks(AssetInitializer.CreateResourcePackList(base.Services));
         AssetInitializer.LoadSplashAssets(asyncLoadForSounds: true);
-        ChromaInitializer.Load();
         _gameContentLoadProcess = LoadContent_Deferred();
     }
 
@@ -10784,7 +_,7 @@
             {
                 newMusic = 10;
             }
-            else
+            else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
             {
                 newMusic = 8;
             }
@@ -14914,6 +_,8 @@
         }
     }
 
+    public static int CoinAnimationFrameCount = 0;
+
     public static void DoUpdate_AnimateItemIcons()
     {
         for (int i = 0; i < itemAnimationsRegistered.Count; i++)
@@ -14924,6 +_,10 @@
                 itemAnimations[num].Update();
             }
         }
+
+        CoinAnimationFrameCount++;
+        if (CoinAnimationFrameCount > 6 * 8)
+            CoinAnimationFrameCount = 0;
     }
 
     public static void QueueMainThreadAction(Action action)
@@ -15017,8 +_,6 @@
         {
             UpdateAudio();
             GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
-            ChromaInitializer.UpdateEvents();
-            Chroma.Update(GlobalTimeWrappedHourly);
             return;
         }
 
@@ -15062,7 +_,6 @@
         }
 
         PlayerInput.SetZoom_Unscaled();
-        MouseOversTryToClear();
         PlayerInput.ResetInputsOnActiveStateChange();
         if (!dedServ && Main.OnTickForThirdPartySoftwareOnly != null)
         {
@@ -15137,37 +_,10 @@
         }
 
         DoUpdate_AutoSave();
+        MetricsTimer updateTimer = TimeMetrics.GetMetricsTimer("Main DoUpdate").Start();
+
         if (!dedServ)
         {
-            ChromaInitializer.UpdateEvents();
-            Chroma.Update(GlobalTimeWrappedHourly);
-            if (superFast)
-            {
-                base.IsFixedTimeStep = false;
-                graphics.SynchronizeWithVerticalRetrace = false;
-            }
-            else
-            {
-                if (FrameSkipMode == FrameSkipMode.Off || FrameSkipMode == FrameSkipMode.Subtle)
-                {
-                    if (base.IsActive)
-                    {
-                        base.IsFixedTimeStep = false;
-                    }
-                    else
-                    {
-                        base.IsFixedTimeStep = true;
-                    }
-                }
-                else
-                {
-                    base.IsFixedTimeStep = true;
-                    graphics.SynchronizeWithVerticalRetrace = true;
-                }
-
-                graphics.SynchronizeWithVerticalRetrace = true;
-            }
-
             if (showSplash)
             {
                 return;
@@ -15220,16 +_,11 @@
                 }
             }
 
-            if (FrameSkipMode == FrameSkipMode.Off || FrameSkipMode == FrameSkipMode.Subtle)
+            if (true)
             {
                 UpdateTimeAccumulator += gameTime.ElapsedGameTime.TotalSeconds;
                 if (UpdateTimeAccumulator < 0.01666666753590107 && !superFast)
                 {
-                    if (FrameSkipMode == FrameSkipMode.Subtle)
-                    {
-                        instance.SuppressDraw();
-                    }
-
                     return;
                 }
 
@@ -15237,9 +_,13 @@
                 UpdateTimeAccumulator -= 0.01666666753590107;
                 UpdateTimeAccumulator = Math.Min(UpdateTimeAccumulator, 0.01666666753590107);
             }
+            // Moved to fix mouse overlays at high fps values
+            
+            MouseOversTryToClear();
 
             uCount++;
             drawSkip = false;
+            ClientLoader.MainRenderer?.Update();
             PlayerInput.AllowExecutionOfGamepadInstructions = true;
             TryPlayingCreditsRoll();
             PlayerInput.SetZoom_UI();
@@ -15293,12 +_,6 @@
                 }
             }
 
-            if (superFast)
-            {
-                graphics.SynchronizeWithVerticalRetrace = false;
-                drawSkip = false;
-            }
-
             if ((double)gfxQuality < 0.2)
             {
                 LegacyLighting.RenderPhases = 8;
@@ -15358,11 +_,8 @@
             hasFocus = base.IsActive;
             if (Platform.IsWindows)
             {
-                Form form = Control.FromHandle(base.Window.Handle) as Form;
-                bool num3 = form.WindowState == FormWindowState.Minimized;
-                bool flag = Form.ActiveForm == form;
-                hasFocus |= flag;
-                if (num3)
+                bool num2 = (SDL2.SDL.SDL_GetWindowFlags(base.Window.Handle) & (uint)SDL2.SDL.SDL_WindowFlags.SDL_WINDOW_MINIMIZED) == 1;
+                if (num2)
                 {
                     hasFocus = false;
                 }
@@ -15372,7 +_,7 @@
             {
                 if (!Platform.IsOSX)
                 {
-                    base.IsMouseVisible = true;
+                    base.IsMouseVisible = TerraAngel.Hooks.MiscHooks.ShouldMouseBeVisible(true);
                 }
 
                 if (netMode != 2 && myPlayer >= 0)
@@ -15393,7 +_,7 @@
 
             if (!Platform.IsOSX)
             {
-                base.IsMouseVisible = false;
+                base.IsMouseVisible = TerraAngel.Hooks.MiscHooks.ShouldMouseBeVisible(false);
             }
 
             SkyManager.Instance.Update(gameTime);
@@ -15418,7 +_,6 @@
             DoUpdate_F8_ToggleNetDiagnostics();
             DoUpdate_F7_ToggleGraphicsDiagnostics();
             DoUpdate_F11_ToggleUI();
-            DoUpdate_AltEnter_ToggleFullscreen();
             DoUpdate_HandleInput();
             DoUpdate_HandleChat();
             DoUpdate_Enter_ToggleChat();
@@ -15521,7 +_,7 @@
             if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
             {
                 Star.UpdateStars();
-                Cloud.UpdateClouds();
+                Cloud.UpdateClouds(gameTime);
             }
             else if (shimmerAlpha > 0f)
             {
@@ -15551,11 +_,10 @@
         {
             DoUpdateInWorld(_worldUpdateTimeTester);
         }
-
         if (netMode != 2)
         {
-            ChromaPainter.Update();
         }
+        updateTimer.Stop();
     }
 
     internal static void UpdateCreativeGameModeOverride()
@@ -16467,6 +_,7 @@
 
     private static void DoUpdate_Enter_ToggleChat()
     {
+        return;
         if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && hasFocus)
         {
             if (chatRelease && !drawingPlayerChat && !editSign && !editChest && !gameMenu && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
@@ -16486,6 +_,7 @@
 
     public static void OpenPlayerChat()
     {
+        return;
         if (CurrentInputTextTakerOverride == null)
         {
             drawingPlayerChat = true;
@@ -16495,6 +_,7 @@
 
     public static void ClosePlayerChat()
     {
+        return;
         drawingPlayerChat = false;
         PlayerInput.WritingText = false;
         player[myPlayer].releaseHook = false;
@@ -16503,6 +_,7 @@
 
     private static void DoUpdate_HandleChat()
     {
+        return;
         if (CurrentInputTextTakerOverride != null)
         {
             drawingPlayerChat = false;
@@ -16595,24 +_,6 @@
         keyState = Keyboard.GetState();
     }
 
-    private static void DoUpdate_AltEnter_ToggleFullscreen()
-    {
-        if ((keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt)) && keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && hasFocus)
-        {
-            if (toggleFullscreen)
-            {
-                ToggleFullScreen();
-                chatRelease = false;
-            }
-
-            toggleFullscreen = false;
-        }
-        else
-        {
-            toggleFullscreen = true;
-        }
-    }
-
     private static void DoUpdate_F11_ToggleUI()
     {
         if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F11))
@@ -18933,6 +_,9 @@
     }
 
     public static void MouseText_DrawItemTooltip_GetLinesInfo(Item item, ref int yoyoLogo, ref int researchLine, float oldKB, ref int numLines, string[] toolTipLine, bool[] preFixLine, bool[] badPreFixLine)
+        => TerraAngel.Hooks.DrawHooks.GetLinesInfoHook(_MouseText_DrawItemTooltip_GetLinesInfo, item, ref yoyoLogo, ref researchLine, oldKB, ref numLines, toolTipLine, preFixLine, badPreFixLine);
+
+    public static void _MouseText_DrawItemTooltip_GetLinesInfo(Item item, ref int yoyoLogo, ref int researchLine, float oldKB, ref int numLines, string[] toolTipLine, bool[] preFixLine, bool[] badPreFixLine)
     {
         toolTipLine[0] = item.HoverName;
         if (item.favorited)
@@ -19068,7 +_,7 @@
                     {
                         toolTipLine[numLines] = Lang.tip[13].Value;
                     }
-
+                    if (ClientConfig.Settings.ShowDetailedTooltips) toolTipLine[numLines] += $" [{item.useAnimation}/{(item.useAnimation / 60f):F2}s{(item.useAnimation != item.useTime ? $" {item.useTime}/{(item.useTime / 60f):F2}s" : "")}]";
                     numLines++;
                 }
 
@@ -19125,6 +_,7 @@
                     toolTipLine[numLines] = Lang.tip[22].Value;
                 }
 
+                if (ClientConfig.Settings.ShowDetailedTooltips) toolTipLine[numLines] += $" [{num6:F2}]";
                 numLines++;
             }
 
@@ -19633,6 +_,7 @@
                     toolTipLine[numLines] = "+4" + Lang.tip[47].Value;
                     preFixLine[numLines] = true;
                     numLines++;
+
                 }
             }
 
@@ -20183,6 +_,9 @@
 
     protected void DrawGoreBehind()
     {
+        if (OptimizationTool.OptimizationToolCache?.DisableGore ?? false)
+            return;
+
         for (int i = 0; i < 600; i++)
         {
             if (!gore[i].active || gore[i].type <= 0)
@@ -20216,6 +_,9 @@
 
     protected void DrawGore()
     {
+        if (OptimizationTool.OptimizationToolCache?.DisableGore ?? false)
+            return;
+
         drawBackGore = false;
         for (int i = 0; i < 600; i++)
         {
@@ -20671,14 +_,18 @@
 
     protected void DrawPlayers_BehindNPCs()
     {
+        Main.screenPosition.Y = floatingCameraY;
         PotionOfReturnRenderer.DrawPlayers(Camera, _playersThatDrawBehindNPCs.Where((Player p) => p.PotionOfReturnOriginalUsePosition.HasValue));
         PlayerRenderer.DrawPlayers(Camera, _playersThatDrawBehindNPCs);
+        Main.screenPosition.Y = (int)Main.screenPosition.Y;
     }
 
     protected void DrawPlayers_AfterProjectiles()
     {
+        Main.screenPosition.Y = floatingCameraY;
         PotionOfReturnRenderer.DrawPlayers(Camera, _playersThatDrawAfterProjectiles.Where((Player p) => p.PotionOfReturnOriginalUsePosition.HasValue));
         PlayerRenderer.DrawPlayers(Camera, _playersThatDrawAfterProjectiles);
+        Main.screenPosition.Y = (int)Main.screenPosition.Y;
     }
 
     protected void DrawElderEye(SpriteBatch spriteBatch, Vector2 worldPosition, float opacity, float scale, int frameNumber, Microsoft.Xna.Framework.Color passedColor)
@@ -25120,7 +_,7 @@
                     float hue = ((float)i + 5f) / 10f;
                     float num10 = 200f;
                     float num11 = (float)timeForVisualEffects / 60f;
-                    Vector3 vector2 = Vector3.Transform(matrix: Matrix.CreateRotationX((num11 - 0.3f + (float)i * 0.1f) * 0.7f * ((float)Math.PI * 2f)) * Matrix.CreateRotationY((num11 - 0.8f + (float)i * 0.3f) * 0.7f * ((float)Math.PI * 2f)) * Matrix.CreateRotationZ((num11 + (float)i * 0.5f) * 0.1f * ((float)Math.PI * 2f)), position: Vector3.Forward);
+                    Vector3 vector2 = Vector3.Transform(matrix: Matrix.CreateRotationX((num11 - 0.3f + (float)i * 0.1f) * 0.7f * ((float)Math.PI * 2f)) * Matrix.CreateRotationY((num11 - 0.8f + (float)i * 0.3f) * 0.7f * ((float)Math.PI * 2f)) * Matrix.CreateRotationZ((num11 + (float)i * 0.5f) * 0.1f * ((float)Math.PI * 2f)), position: -Vector3.UnitZ);
                     num10 += Utils.GetLerpValue(-1f, 1f, vector2.Z, clamped: true) * 150f;
                     Vector2 spinningpoint = new Vector2(vector2.X, vector2.Y) * num10 * num7;
                     float lerpValue = Utils.GetLerpValue(90f, 0f, rCurrentNPC.ai[1], clamped: true);
@@ -30179,7 +_,7 @@
                         float num222 = 0.9f + num220 * 0.8f;
                         num222 *= num222;
                         num222 *= 0.8f;
-                        Vector2 position7 = Vector2.SmoothStep(center2, value41, num220);
+                        Vector2 position7 = VectorExtensions.SmoothStep(center2, value41, num220);
                         Microsoft.Xna.Framework.Rectangle rectangle8 = value40.Frame(1, 7, 0, (int)(num220 * 7f));
                         EntitySpriteDraw(value40, position7, rectangle8, transparent, proj.rotation + (float)Math.PI * 2f * (num220 + GlobalTimeWrappedHourly * 1.2f) * 0.2f + (float)num221 * ((float)Math.PI * 2f / 5f), rectangle8.Size() / 2f, num222, SpriteEffects.None);
                     }
@@ -32892,10 +_,10 @@
 
             if (proj.type == 434)
             {
-                Vector2 vector112 = new Vector2(proj.ai[0], proj.ai[1]);
+                float ai0 = proj.ai[0], ai1 = proj.ai[1];
+                Vector2 vector112 = new Vector2(ai0, ai1);
                 Vector2 v = proj.position - vector112;
-                float num420 = (float)Math.Sqrt(v.X * v.X + v.Y * v.Y);
-                new Vector2(4f, num420);
+                float num420 = v.Length();
                 float rotation30 = v.ToRotation() + (float)Math.PI / 2f;
                 Vector2 vector113 = Vector2.Lerp(proj.position, vector112, 0.5f);
                 Microsoft.Xna.Framework.Color red = Microsoft.Xna.Framework.Color.Red;
@@ -35489,10 +_,9 @@
             return 0;
         }
 
-        Matrix matrix = Matrix.Invert(GameViewMatrix.ZoomMatrix);
         Vector2 position = ReverseGravitySupport(MouseScreen);
-        Vector2.Transform(screenPosition, matrix);
+        Vector2.Transform(screenPosition, GameViewMatrix.InverseZoomMatrix);
-        Vector2 v = Vector2.Transform(position, matrix) + screenPosition;
+        Vector2 v = Vector2.Transform(position, GameViewMatrix.InverseZoomMatrix) + screenPosition;
         bool flag2 = proj.Hitbox.Contains(v.ToPoint());
         if (!((flag2 || SmartInteractProj == proj.whoAmI) & !localPlayer.lastMouseInterface))
         {
@@ -35577,10 +_,9 @@
             return 0;
         }
 
-        Matrix matrix = Matrix.Invert(GameViewMatrix.ZoomMatrix);
         Vector2 position = ReverseGravitySupport(MouseScreen);
-        Vector2.Transform(screenPosition, matrix);
+        Vector2.Transform(screenPosition, GameViewMatrix.InverseZoomMatrix);
-        Vector2 v = Vector2.Transform(position, matrix) + screenPosition;
+        Vector2 v = Vector2.Transform(position, GameViewMatrix.InverseZoomMatrix) + screenPosition;
         bool flag2 = proj.Hitbox.Contains(v.ToPoint());
         if (!((flag2 || SmartInteractProj == proj.whoAmI) & !localPlayer.lastMouseInterface))
         {
@@ -36366,8 +_,7 @@
                     {
                         int num = item.type - 71;
                         texture = TextureAssets.Coin[num].Value;
-                        DrawItem_AnimateSlot(slot, 6, 8);
-                        frame = (glowmaskFrame = _coinOnWorldAnimation.GetFrame(texture, itemFrameCounter[slot]));
+                        frame = (glowmaskFrame = _coinOnWorldAnimation.GetFrame(texture, CoinAnimationFrameCount));
                         return;
                     }
 
@@ -36638,6 +_,9 @@
 
     protected void DrawDust()
     {
+        if (OptimizationTool.OptimizationToolCache?.DisableDust ?? false)
+            return;
+
         Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 500, (int)screenPosition.Y - 50, screenWidth + 1000, screenHeight + 100);
         rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 1000, (int)screenPosition.Y - 1050, screenWidth + 2000, screenHeight + 2100);
         Microsoft.Xna.Framework.Rectangle rectangle2 = rectangle;
@@ -39013,6 +_,7 @@
 
     public void DrawWindowsIMEPanel(Vector2 position, float xAnchor = 0f)
     {
+        return;
         if (!Platform.Get<IImeService>().IsCandidateListVisible)
         {
             return;
@@ -39095,6 +_,7 @@
 
     protected void DrawPlayerChat()
     {
+        return;
         TextSnippet[] array = null;
         if (drawingPlayerChat)
         {
@@ -39201,8 +_,7 @@
         new Vector2(num5, num6);
         DrawBestiaryIcon(num, num2);
         DrawEmoteBubblesButton(num, num2);
-        DrawTrashItemSlot(num, num2);
-        spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[4].Value, new Vector2(40f, 0f) + vector, new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+        DrawTrashItemSlot(num, num2 + 9);
         inventoryScale = 0.85f;
         if (mouseX > 20 && mouseX < (int)(20f + 560f * inventoryScale) && mouseY > 20 && mouseY < (int)(20f + 280f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
         {
@@ -39239,7 +_,7 @@
                     ItemSlot.MouseHover(player[myPlayer].inventory, 0, num9);
                 }
 
-                ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 0, num9, new Vector2(num7, num8));
+                ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 0, num9, new Vector2(num7, num8 + 9f));
             }
         }
 
@@ -41225,7 +_,7 @@
 
         float num2 = 0.9f;
         Texture2D value = TextureAssets.HbLock[(!player[myPlayer].hbLocked) ? 1u : 0u].Value;
-        Microsoft.Xna.Framework.Rectangle value2 = value.Frame(2);
+        Microsoft. Xna.Framework.Rectangle value2 = value.Frame(2);
         bool flag = false;
         if (mouseX > pivotTopLeftX && (float)mouseX < (float)pivotTopLeftX + (float)value2.Width * num2 && mouseY > num && (float)mouseY < (float)num + (float)value2.Height * num2)
         {
@@ -41248,10 +_,10 @@
             }
         }
 
-        spriteBatch.Draw(value, new Vector2(pivotTopLeftX, num), value2, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
+        spriteBatch.Draw(value, new Vector2(pivotTopLeftX, num + 4f), value2, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
         if (flag)
         {
-            spriteBatch.Draw(value, new Vector2(pivotTopLeftX, num), value.Frame(2, 1, 1), OurFavoriteColor, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
+            spriteBatch.Draw(value, new Vector2(pivotTopLeftX, num + 4f), value.Frame(2, 1, 1), OurFavoriteColor, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
         }
     }
 
@@ -41288,7 +_,7 @@
             }
         }
 
-        Vector2 vector = new Vector2(pivotTopLeftX, num);
+        Vector2 vector = new Vector2(pivotTopLeftX, num + 4f);
         spriteBatch.Draw(value, vector, rectangle, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
         if (flag2)
         {
@@ -41331,7 +_,7 @@
             }
         }
 
-        Vector2 vector = new Vector2(pivotTopLeftX, num);
+        Vector2 vector = new Vector2(pivotTopLeftX, num + 4f);
         spriteBatch.Draw(value, vector, rectangle, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
         if (flag2)
         {
@@ -42342,14 +_,6 @@
             return;
         }
 
-        string text = Lang.inter[37].Value;
-        if (player[myPlayer].inventory[player[myPlayer].selectedItem].Name != null && player[myPlayer].inventory[player[myPlayer].selectedItem].Name != "")
-        {
-            text = player[myPlayer].inventory[player[myPlayer].selectedItem].AffixName();
-        }
-
-        Vector2 vector = FontAssets.MouseText.Value.MeasureString(text) / 2f;
-        spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2(236f - vector.X, 0f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
         int num = 20;
         for (int i = 0; i < 10; i++)
         {
@@ -42389,7 +_,7 @@
 
             float num4 = inventoryScale;
             inventoryScale = num2;
-            ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, i, new Vector2(num, num3), lightColor);
+            ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, i, new Vector2(num, num3 + 8f), lightColor);
             inventoryScale = num4;
             num += (int)((float)TextureAssets.InventoryBack.Width() * hotbarScale[i]) + 4;
         }
@@ -42403,7 +_,7 @@
             Microsoft.Xna.Framework.Color lightColor2 = new Microsoft.Xna.Framework.Color(255, 255, 255, a2);
             float num7 = inventoryScale;
             inventoryScale = num5;
-            ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, selectedItem, new Vector2(num, num6), lightColor2);
+            ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, selectedItem, new Vector2(num, num6 + 8f), lightColor2);
             inventoryScale = num7;
         }
     }
@@ -43766,6 +_,7 @@
 
     private static void DrawInterface_41_InterfaceLogic4()
     {
+        TerraAngel.Hooks.MiscHooks.LastCursorOverride = cursorOverride;
         if (mouseRight)
         {
             npcChatRelease = false;
@@ -45939,7 +_,7 @@
                         Tile tileSafely = Framing.GetTileSafely(value);
                         if (tileSafely.active())
                         {
-                            MapHelper.GetTileBaseOption(value.X, value.Y, tileSafely.type, tileSafely, ref baseOption);
+                            MapHelper.GetTileBaseOption(value.X, value.Y, tileSafely.type, ref tileSafely.RefData, ref baseOption);
                             num10 = tileSafely.type;
                             if (TileID.Sets.BasicChest[num10] || TileID.Sets.BasicChestFake[num10])
                             {
@@ -47002,7 +_,6 @@
 
     private static void TryDisposingEverything()
     {
-        ChromaInitializer.DisableAllDeviceGroups();
         CaptureManager.Instance.Dispose();
         audioSystem.Dispose();
     }
@@ -47133,6 +_,12 @@
 
     public static void DrawCursor(Vector2 bonus, bool smart = false)
     {
+        if (!Main.instance.IsActive)
+            return;
+        if (ClientLoader.MainRenderer is not null && (ImGui.GetIO().WantCaptureMouse || ImGui.GetIO().WantCaptureKeyboard))
+        {
+            return;
+        }
         if (gameMenu && alreadyGrabbingSunOrMoon)
         {
             return;
@@ -47219,6 +_,12 @@
 
     public static Vector2 DrawThickCursor(bool smart = false)
     {
+        if (!Main.instance.IsActive)
+            return Vector2.Zero;
+        if (ClientLoader.MainRenderer is not null && (ImGui.GetIO().WantCaptureMouse || ImGui.GetIO().WantCaptureKeyboard))
+        {
+            return Vector2.Zero;
+        }
         if (ThickMouse)
         {
             bool showGamepadCursor = PlayerInput.SettingsForUI.ShowGamepadCursor;
@@ -47386,7 +_,7 @@
         chatMonitor.Clear();
         screenLastPosition = screenPosition;
         screenPosition.Y = (float)(worldSurface * 16.0 - (double)screenHeight);
-        MenuXMovement = 4f;
+        MenuXMovement = 4f * 60f * (float)gameTime.ElapsedGameTime.TotalSeconds;
         if (alreadyGrabbingSunOrMoon)
         {
             playOldTile = true;
@@ -47408,17 +_,17 @@
         }
 
         Star.UpdateStars();
-        Cloud.UpdateClouds();
+        Cloud.UpdateClouds(gameTime);
         DrawFPS();
         background = 0;
         byte b = (byte)((255 + tileColor.R * 2) / 3);
         Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(b, b, b, 255);
         if (WorldGen.remixWorldGen)
         {
-            logoRotation += logoRotationSpeed * 4E-05f;
+            logoRotation += logoRotationSpeed * 4E-05f * 60f * (float)gameTime.ElapsedGameTime.TotalSeconds;
             if ((double)logoRotation < 3.04)
             {
-                logoRotation += logoRotationSpeed * 0.0016f;
+                logoRotation += logoRotationSpeed * 0.0016f * 60f * (float)gameTime.ElapsedGameTime.TotalSeconds;
                 if (logoRotationSpeed < 0f)
                 {
                     logoRotationSpeed = 0f;
@@ -47443,7 +_,7 @@
                 logoRotationSpeed -= 1f;
             }
 
-            logoScale += logoScaleSpeed * 9E-05f;
+            logoScale += logoScaleSpeed * 9E-05f * 60f * (float)gameTime.ElapsedGameTime.TotalSeconds;
             if (logoScale > 1f)
             {
                 logoScaleDirection = -1f;
@@ -47464,7 +_,7 @@
         }
         else if (WorldGen.drunkWorldGen)
         {
-            logoRotation += logoRotationSpeed * 4E-06f;
+            logoRotation += logoRotationSpeed * 4E-06f * 60f * (float)gameTime.ElapsedGameTime.TotalSeconds;
             if (logoRotationSpeed > 0f)
             {
                 logoRotationSpeed += 1500f;
@@ -47484,14 +_,14 @@
         {
             if ((double)logoRotation > 0.09)
             {
-                logoRotation += logoRotationSpeed * 0.0016f;
+                logoRotation += logoRotationSpeed * 0.0016f * 60f * (float)gameTime.ElapsedGameTime.TotalSeconds;
                 if (logoRotationSpeed > 0f)
                 {
                     logoRotationSpeed = 0f;
                 }
             }
 
-            logoRotation += logoRotationSpeed * 4E-06f;
+            logoRotation += logoRotationSpeed * 4E-06f * 60f * (float)gameTime.ElapsedGameTime.TotalSeconds;
             if ((double)logoRotation > 0.08)
             {
                 logoRotationDirection = -1f;
@@ -47510,7 +_,7 @@
                 logoRotationSpeed -= 1f;
             }
 
-            logoScale += logoScaleSpeed * 9E-06f;
+            logoScale += logoScaleSpeed * 9E-06f * 60f * (float)gameTime.ElapsedGameTime.TotalSeconds;
             if ((double)logoScale > 1.35)
             {
                 logoScaleDirection = -1f;
@@ -47532,12 +_,7 @@
 
         Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoA / 255f)), (byte)((float)(int)color.G * ((float)LogoA / 255f)), (byte)((float)(int)color.B * ((float)LogoA / 255f)), (byte)((float)(int)color.A * ((float)LogoA / 255f)));
         Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoB / 255f)), (byte)((float)(int)color.G * ((float)LogoB / 255f)), (byte)((float)(int)color.B * ((float)LogoB / 255f)), (byte)((float)(int)color.A * ((float)LogoB / 255f)));
-        if (playOldTile)
-        {
-            spriteBatch.Draw(TextureAssets.Logo3.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
-            spriteBatch.Draw(TextureAssets.Logo4.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
-        }
-        else
+        
         {
             spriteBatch.Draw(TextureAssets.Logo.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
             spriteBatch.Draw(TextureAssets.Logo2.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
@@ -48188,6 +_,26 @@
             }
 
             num11++;
+            num5++;
+            array9[num11] = GetString("TerraAngel Settings");
+            if (selectedMenu == num11)
+            {
+                SoundEngine.PlaySound(10);
+                menuMode = 888;
+                MenuUI.SetState(ClientLoader.ConfigUI!);
+            }
+
+            num11++;
+            num5++;
+            array9[num11] = GetString("TerraAngel Plugins");
+            if (selectedMenu == num11)
+            {
+                SoundEngine.PlaySound(10);
+                menuMode = 888;
+                MenuUI.SetState(ClientLoader.PluginUI!);
+            }
+
+            num11++;
             array9[num11] = Lang.menu[14].Value;
             if (selectedMenu == num11)
             {
@@ -48962,6 +_,8 @@
                     menuMode = 112;
                 }
 
+
+
                 num20++;
                 array9[num20] = Lang.menu[210].Value;
                 if (selectedMenu == num20)
@@ -49248,14 +_,6 @@
                 }
 
                 num25++;
-                array9[num25] = Lang.menu[(int)(247 + FrameSkipMode)].Value;
-                if (selectedMenu == num25)
-                {
-                    SoundEngine.PlaySound(12);
-                    CycleFrameSkipMode();
-                }
-
-                num25++;
                 array9[num25] = Language.GetTextValue("UI.LightMode_" + Lighting.Mode);
                 if (selectedMenu == num25)
                 {
@@ -49395,83 +_,9 @@
             }
             else if (menuMode == 111)
             {
-                for (int num29 = 0; num29 < 9; num29++)
-                {
-                    array7[num29] = 0.85f;
-                }
-
-                num2 = 210;
-                num4 = 55;
-                int num30 = 0;
-                array9[num30] = Lang.menu[73].Value + ": " + PendingResolutionWidth + "x" + PendingResolutionHeight;
-                if (selectedMenu == num30)
-                {
-                    SoundEngine.PlaySound(12);
-                    int num31 = 0;
-                    for (int num32 = 0; num32 < numDisplayModes; num32++)
-                    {
-                        if (displayWidth[num32] == PendingResolutionWidth && displayHeight[num32] == PendingResolutionHeight)
-                        {
-                            num31 = num32;
-                            break;
-                        }
-                    }
-
-                    num31 = (num31 + 1) % numDisplayModes;
-                    PendingResolutionWidth = displayWidth[num31];
-                    PendingResolutionHeight = displayHeight[num31];
-                }
-
-                num30++;
-                if (IsBorderlessDisplayAvailable())
-                {
-                    array9[num30] = Lang.menu[PendingBorderlessState ? 245 : 246].Value;
-                    if (selectedMenu == num30)
-                    {
-                        SoundEngine.PlaySound(12);
-                        PendingBorderlessState = !PendingBorderlessState;
-                    }
-
-                    num30++;
-                }
-
-                array9[num30] = (graphics.IsFullScreen ? Lang.menu[49].Value : Lang.menu[50].Value);
-                if (selectedMenu == num30)
-                {
-                    ToggleFullScreen();
-                }
-
-                num30++;
-                array4[num30] = 100;
-                array9[num30] = Lang.menu[134].Value;
-                if (selectedMenu == num30)
-                {
-                    if (graphics.IsFullScreen || PendingBorderlessState != screenBorderless || PendingResolutionWidth != screenWidth || PendingResolutionHeight != screenHeight)
-                    {
-                        screenBorderless = PendingBorderlessState;
-                        screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
-                        SetResolution(PendingResolutionWidth, PendingResolutionHeight);
-                    }
-
-                    SoundEngine.PlaySound(11);
-                    menuMode = 1111;
-                }
-
-                num30++;
-                array9[num30] = Lang.menu[5].Value;
-                array4[num30] = 100;
-                if (selectedMenu == num30 || flag5)
-                {
-                    flag5 = false;
-                    PendingResolutionWidth = graphics.PreferredBackBufferWidth;
-                    PendingResolutionHeight = graphics.PreferredBackBufferHeight;
-                    PendingBorderlessState = screenBorderless;
-                    menuMode = 1111;
-                    SoundEngine.PlaySound(11);
-                }
-
-                num30++;
-                num5 = num30;
+                SoundEngine.PlaySound(10);
+                menuMode = 888;
+                MenuUI.SetState(ClientLoader.GraphicsUI!);
             }
             else if (menuMode == 1125)
             {
@@ -51321,18 +_,6 @@
         }
     }
 
-    public static void CycleFrameSkipMode()
-    {
-        int frameSkipMode = (int)FrameSkipMode;
-        frameSkipMode++;
-        if (frameSkipMode < 0 || frameSkipMode > 2)
-        {
-            frameSkipMode = 0;
-        }
-
-        FrameSkipMode = (FrameSkipMode)frameSkipMode;
-    }
-
     private static void OnSubmitServerPasswordFromRequest(string passwordCandidate)
     {
         Netplay.ServerPassword = passwordCandidate;
@@ -51670,48 +_,6 @@
         _uiScaleWanted = uiScaleWanted;
     }
 
-    private static bool IsBorderlessDisplayAvailable()
-    {
-        bool result = false;
-        if (Platform.IsWindows)
-        {
-            result = true;
-        }
-
-        return result;
-    }
-
-    private static void SetDisplayModeAsBorderless(ref int width, ref int height, Form form)
-    {
-        if (screenBorderless && !graphics.IsFullScreen && screenBorderlessPendingResizes > 0)
-        {
-            screenBorderlessPendingResizes--;
-            System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
-            width = bounds.Width;
-            height = bounds.Height;
-            TryPickingDefaultUIScale(height);
-        }
-    }
-
-    private static void ApplyBorderlessResolution(Form form)
-    {
-        if (screenBorderlessPendingResizes > 0)
-        {
-            screenBorderlessPendingResizes--;
-            System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
-            form.Location = new System.Drawing.Point(bounds.X, bounds.Y);
-            form.FormBorderStyle = FormBorderStyle.None;
-            form.Width = bounds.Width;
-            form.Height = bounds.Height;
-        }
-    }
-
-    private static void SetBorderlessFormStyle(Form form)
-    {
-        form.Location = new System.Drawing.Point(0, 0);
-        form.FormBorderStyle = FormBorderStyle.None;
-    }
-
     public static void OpenCharacterSelectUI()
     {
         menuMode = 888;
@@ -52209,9 +_,11 @@
             return;
         }
 
+        MetricsTimer backgroundTimer = TimeMetrics.GetMetricsTimer("Draw Background");
         Microsoft.Xna.Framework.Color[] slices = new Microsoft.Xna.Framework.Color[9];
         Stopwatch stopwatch = new Stopwatch();
         stopwatch.Start();
+        backgroundTimer.Start();
         double num2 = maxTilesY - 330;
         double num3 = (int)((num2 - worldSurface) / 6.0) * 6;
         num2 = worldSurface + num3 - 5.0;
@@ -52666,11 +_,6 @@
                                 continue;
                             }
 
-                            if (tile[num24, num25] == null)
-                            {
-                                tile[num24, num25] = new Tile();
-                            }
-
                             if (num == 0f && (color4.R > 0 || color4.G > 0 || color4.B > 0))
                             {
                                 if (!drawToScreen)
@@ -52900,11 +_,7 @@
                                 if (WorldGen.InWorld(num37, num38))
                                 {
                                     Microsoft.Xna.Framework.Color color12 = Lighting.GetColor(num37, num38);
-                                    if (tile[num37, num38] == null)
-                                    {
-                                        tile[num37, num38] = new Tile();
-                                    }
-
+                                    
                                     if (color12.R > 0 || color12.G > 0 || color12.B > 0)
                                     {
                                         Lighting.GetCornerColors(num37, num38, out var vertices2, ugBackTransition);
@@ -53501,6 +_,7 @@
         }
 
         Lighting.GlobalBrightness = globalBrightness;
+        backgroundTimer.Stop();
         TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
     }
 
@@ -53878,10 +_,6 @@
                             int num23 = (int)(((float)(bgStartX + num3 * n + num20 * 16 + 8) + screenPosition.X) / 16f);
                             int num24 = (int)((num22 + screenPosition.Y) / 16f);
                             Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(num23, num24);
-                            if (tile[num23, num24] == null)
-                            {
-                                tile[num23, num24] = new Tile();
-                            }
 
                             if (color3.R > 0 || color3.G > 0 || color3.B > 0)
                             {
@@ -54094,10 +_,6 @@
                                 int num36 = (int)(((float)(bgStartX + num3 * num31 + num33 * 16 + 8) + screenPosition.X) / 16f);
                                 int num37 = (int)((num35 + screenPosition.Y) / 16f);
                                 Microsoft.Xna.Framework.Color color11 = Lighting.GetColor(num36, num37);
-                                if (tile[num36, num37] == null)
-                                {
-                                    tile[num36, num37] = new Tile();
-                                }
 
                                 if (color11.R > 0 || color11.G > 0 || color11.B > 0)
                                 {
@@ -54621,23 +_,8 @@
 
     private static bool ShouldDrawBackgroundTileAt(int i, int j)
     {
-        if (tile[i, j] == null)
-        {
-            tile[i, j] = new Tile();
-        }
-
         if (caveParallax != 0f)
         {
-            if (tile[i - 1, j] == null)
-            {
-                tile[i - 1, j] = new Tile();
-            }
-
-            if (tile[i + 1, j] == null)
-            {
-                tile[i + 1, j] = new Tile();
-            }
-
             if (WallLightAt(i, j) || WallLightAt(i - 1, j) || WallLightAt(i + 1, j))
             {
                 return true;
@@ -54674,6 +_,7 @@
 
     protected void RenderBackground()
     {
+        if (!Main.instance.IsActive && netMode == 0) return;
         if (drawToScreen)
         {
             return;
@@ -55144,7 +_,7 @@
 
         if (mapFullscreen)
         {
-            if (mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap)
+            if (mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap && !ToolManager.GetTool<MapScreenshotTool>().SelectingArea)
             {
                 if (mouseLeftRelease)
                 {
@@ -56178,6 +_,10 @@
 
     private static void DrawMapFullscreenBackground(Vector2 screenPosition, int screenWidth, int screenHeight)
     {
+        if (!WorldGen.InWorld((int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)))
+        {
+            return;
+        }
         Asset<Texture2D> asset = TextureAssets.MapBGs[0];
         int num = -1;
         Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
@@ -56936,6 +_,7 @@
             return;
         }
 
+        MetricsTimer tileTimer = TimeMetrics.GetMetricsTimer("Render Tiles").Start();
         RenderBlack();
         base.GraphicsDevice.SetRenderTarget(tileTarget);
         base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
@@ -56962,6 +_,7 @@
         DrawTileEntities(solidLayer: true, overRenderTargets: false, intoRenderTargets: true);
         TimeLogger.DetailedDrawTime(28);
         base.GraphicsDevice.SetRenderTarget(null);
+        tileTimer.Stop();
     }
 
     protected void RenderTiles2()
@@ -57000,6 +_,7 @@
 
     protected void RenderWater()
     {
+        if (!Main.instance.IsActive && netMode == 0) return;
         if (!drawToScreen)
         {
             base.GraphicsDevice.SetRenderTarget(waterTarget);
@@ -57723,6 +_,7 @@
 
     protected void DrawBlack(bool force = false)
     {
+        if (LightingModifierTool.LightingModifierToolCache?.FullBright ?? false) return;
         if (shimmerAlpha == 1f)
         {
             return;
@@ -58062,11 +_,10 @@
         }
     }
 
-    protected void InitTargets()
+    public void InitTargets()
     {
         if (!PreventUpdatingTargets)
         {
-            UpdateDisplaySettings();
         }
 
         InitTargets(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
@@ -61592,13 +_,36 @@
     {
     }
 
+    private Microsoft.Xna.Framework.Timing.WaitableTimer? InactiveSleepTimer;
+
     protected override void Draw(GameTime gameTime)
     {
         if (!_isDrawingOrUpdating && IsGraphicsDeviceAvailable)
         {
+            if (!gameMenu && !IsActive && InactiveSleepTime > TimeSpan.Zero)
+            {
+                Stopwatch sw = new Stopwatch();
+
+                sw.Start();
+
+                while (sw.Elapsed < InactiveSleepTime)
+                {
+                    Thread.Sleep(1);
+                }
+
+                sw.Stop();
+            }
+
+            ClientLoader.MainRenderer?.PreUpdate();
             _isDrawingOrUpdating = true;
             EnsureRenderTargetContent();
+            MetricsTimer drawTimer = TimeMetrics.GetMetricsTimer("Main DoDraw").Start();
             DoDraw(gameTime);
+            drawTimer.Stop();
+            float y = Main.screenPosition.Y;
+            Main.screenPosition.Y = Main.floatingCameraY;
+            ClientLoader.MainRenderer?.Render();
+            Main.screenPosition.Y = y;
             if (Main.OnPostDraw != null)
             {
                 Main.OnPostDraw(gameTime);
@@ -61611,6 +_,8 @@
 
     private void DoDraw(GameTime gameTime)
     {
+        ClientLoader.WindowManager!.Update();
+
         Stopwatch stopwatch = new Stopwatch();
         stopwatch.Start();
         if (showSplash)
@@ -61679,7 +_,6 @@
 
         if (!dedServ)
         {
-            UpdateDisplaySettings();
             if (Main.OnPreDraw != null)
             {
                 Main.OnPreDraw(gameTime);
@@ -61736,7 +_,7 @@
         }
 
         HoverItem = new Item();
-        DoDraw_UpdateCameraPosition();
+        TerraAngel.Hooks.DrawHooks.UpdateCameraHook(DoDraw_UpdateCameraPosition);
         CheckMonoliths();
         sunCircle += 0.01f;
         if ((double)sunCircle > 6.285)
@@ -62441,7 +_,7 @@
             DrawItemTextPopups(targetScale);
             PlayerInput.SetZoom_UI();
             spriteBatch.End();
-            spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, null, null, null, UIScaleMatrix);
+            spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, null, null, null, UIScaleMatrix);
             DrawNetplayStatusText();
             DrawFPS();
             spriteBatch.End();
@@ -62985,10 +_,12 @@
         }
 
         instance.CameraModifiers.ApplyTo(ref screenPosition);
+        ClampScreenPositionToWorld();
+        floatingCameraY = screenPosition.Y;
         screenPosition.X = (int)screenPosition.X;
         screenPosition.Y = (int)screenPosition.Y;
-        ClampScreenPositionToWorld();
     }
+    public static float floatingCameraY;
 
     public static bool IsItDay()
     {
@@ -63458,7 +_,7 @@
                 _oldNetplayStatusText = text;
             }
 
-            Vector2 position = new Vector2(628f - ChatManager.GetStringSize(FontAssets.MouseText.Value, _netplayStatusTextSnippets, Vector2.One).X * 0.5f + (float)(screenWidth - 800), 84f);
+            Vector2 position = new Vector2(628f - MathF.Floor(ChatManager.GetStringSize(FontAssets.MouseText.Value, _netplayStatusTextSnippets, Vector2.One).X * 0.5f) + (float)(screenWidth - 800), 84f);
             int hoveredSnippet;
             if (Netplay.Connection.StatusTextHasShadows)
             {
@@ -64976,14 +_,12 @@
 
     public static void NewText(string newText, byte R = byte.MaxValue, byte G = byte.MaxValue, byte B = byte.MaxValue)
     {
-        chatMonitor.NewText(newText, R, G, B);
-        SoundEngine.PlaySound(12);
+        ClientLoader.Chat.WriteLine(newText, new Color(R, G, B, 255));
     }
 
     public static void NewTextMultiline(string text, bool force = false, Microsoft.Xna.Framework.Color c = default(Microsoft.Xna.Framework.Color), int WidthLimit = -1)
     {
-        chatMonitor.NewTextMultiline(text, force, c, WidthLimit);
-        SoundEngine.PlaySound(12);
+        ClientLoader.Chat.WriteLine(text, c);
     }
 
     public static void StopRain()
@@ -66727,7 +_,9 @@
             }
             else
             {
+                SoundEngine.PlaySound(10);
-                menuMode = 13;
+                menuMode = 888;
+                MenuUI.SetState(ClientLoader.MultiplayerJoinUI!);
                 clrInput();
             }
         }
@@ -66743,228 +_,9 @@
         }
     }
 
-    public static void ToggleFullScreen()
-    {
-        SetFullScreen(!graphics.IsFullScreen);
-    }
-
-    public static void SetFullScreen(bool fullscreen)
-    {
-        SetDisplayMode(PendingResolutionWidth, PendingResolutionHeight, fullscreen);
-    }
-
-    public static void SetResolution(int width, int height)
-    {
-        SetDisplayMode(width, height, graphics.IsFullScreen);
-    }
-
-    public static void SetDisplayMode(int width, int height, bool fullscreen)
-    {
-        bool flag = false;
-        Form form = null;
-        if (Platform.IsWindows)
-        {
-            form = (Form)Control.FromHandle(instance.Window.Handle);
-            screenMaximized = form.WindowState == FormWindowState.Maximized;
-            if (screenBorderless && screenMaximized && !graphics.IsFullScreen)
-            {
-                screenMaximized = false;
-                form.WindowState = FormWindowState.Normal;
-            }
-
-            flag = form.FormBorderStyle == FormBorderStyle.None;
-        }
-        else
-        {
-            screenMaximized = false;
-        }
-
-        bool flag2 = false;
-        int num3;
-        int num4;
-        if (screenBorderless || screenMaximized || graphics.IsFullScreen || fullscreen)
-        {
-            bool flag3 = false;
-            if (PlayerInput.SteamDeckIsUsed)
-            {
-                flag3 = true;
-                if (!fullscreen && !graphics.IsFullScreen)
-                {
-                    width = 1280;
-                    height = 800;
-                    TryPickingDefaultUIScale(800f);
-                }
-            }
-
-            if (Platform.IsWindows)
-            {
-                form.MinimumSize = new Size(0, 0);
-                if (!fullscreen && !flag3)
-                {
-                    SetDisplayModeAsBorderless(ref width, ref height, form);
-                }
-            }
-
-            if (width > maxScreenW)
-            {
-                float num = (float)height / (float)width;
-                width = maxScreenW;
-                height = (int)(num * (float)width);
-            }
-
-            if (height > maxScreenH)
-            {
-                float num2 = (float)width / (float)height;
-                height = maxScreenH;
-                width = (int)(num2 * (float)height);
-            }
-
-            PlayerInput.RawMouseScale = new Vector2((float)width / (float)instance.Window.ClientBounds.Width, (float)height / (float)instance.Window.ClientBounds.Height);
-            if (!graphics.IsFullScreen)
-            {
-                num3 = Math.Max(graphics.PreferredBackBufferWidth, graphics.GraphicsDevice.Viewport.Width);
-                num4 = Math.Max(graphics.PreferredBackBufferHeight, graphics.GraphicsDevice.Viewport.Height);
-                if (num3 != graphics.PreferredBackBufferWidth || num4 != graphics.PreferredBackBufferHeight)
-                {
-                    flag2 = true;
-                }
-            }
-            else
-            {
-                num3 = graphics.PreferredBackBufferWidth;
-                num4 = graphics.PreferredBackBufferHeight;
-            }
-        }
-        else
-        {
-            PlayerInput.RawMouseScale = Vector2.One;
-            if (Platform.IsWindows)
-            {
-                form.MinimumSize = new Size(minScreenW, minScreenH);
-                if (flag)
-                {
-                    width = displayWidth[0];
-                    height = displayHeight[0];
-                }
-            }
-
-            width = Math.Min(width, maxScreenW);
-            height = Math.Min(height, maxScreenH);
-            num3 = graphics.GraphicsDevice.Viewport.Width;
-            num4 = graphics.GraphicsDevice.Viewport.Height;
-            flag2 = graphics.PreferredBackBufferWidth != graphics.GraphicsDevice.Viewport.Width || graphics.PreferredBackBufferHeight != graphics.GraphicsDevice.Viewport.Height;
-        }
-
-        if (Platform.IsWindows && !fullscreen && !flag2)
-        {
-            if (form.ClientSize.Width < graphics.PreferredBackBufferWidth)
-            {
-                width = form.ClientSize.Width;
-                flag2 = true;
-            }
-
-            if (form.ClientSize.Height < graphics.PreferredBackBufferHeight)
-            {
-                height = form.ClientSize.Height;
-                flag2 = true;
-            }
-        }
-
-        width &= 0x7FFFFFFE;
-        height &= 0x7FFFFFFE;
-        width = Math.Max(width, minScreenW);
-        height = Math.Max(height, minScreenH);
-        if (graphics.IsFullScreen != fullscreen)
-        {
-            graphics.PreferredBackBufferWidth = width;
-            graphics.PreferredBackBufferHeight = height;
-            graphics.ApplyChanges();
-            graphics.ToggleFullScreen();
-        }
-
-        if (width != num3 || height != num4 || flag2)
-        {
-            mapTime = 0;
-            if (gamePaused)
-            {
-                renderNow = true;
-            }
-
-            screenWidth = width;
-            screenHeight = height;
-            graphics.PreferredBackBufferWidth = screenWidth;
-            graphics.PreferredBackBufferHeight = screenHeight;
-            graphics.ApplyChanges();
-            PlayerInput.CacheOriginalScreenDimensions();
-            FixUIScale();
-            if (Main.OnResolutionChanged != null)
-            {
-                Main.OnResolutionChanged(new Vector2(screenWidth, screenHeight));
-            }
-
-            PendingResolutionWidth = screenWidth;
-            PendingResolutionHeight = screenHeight;
-            PlayerInput.CacheOriginalScreenDimensions();
-            if (Platform.IsWindows && !fullscreen)
-            {
-                if (screenBorderless)
-                {
-                    ApplyBorderlessResolution(form);
-                    form.FormBorderStyle = FormBorderStyle.None;
-                }
-                else
-                {
-                    form.FormBorderStyle = FormBorderStyle.Sizable;
-                }
-
-                form.SendToBack();
-                form.BringToFront();
-            }
-
-            Lighting.Initialize();
-            if (!drawToScreen && !_isResizingAndRemakingTargets)
-            {
-                _isResizingAndRemakingTargets = true;
-                instance.InitTargets();
-                _isResizingAndRemakingTargets = false;
-            }
-
-            UserInterface.ActiveInstance.Recalculate();
-            instance._needsMenuUIRecalculation = true;
-            Console.WriteLine(Language.GetTextValue("Misc.ResolutionChanged", width, height));
-            chatMonitor.OnResolutionChange();
-        }
-
-        if (!graphics.SynchronizeWithVerticalRetrace)
-        {
-            graphics.SynchronizeWithVerticalRetrace = true;
-            graphics.ApplyChanges();
-        }
-    }
-
     public static void FixUIScale()
     {
         UIScale = UIScaleWanted;
-    }
-
-    public void FullscreenStartup()
-    {
-        startFullscreen = false;
-        int currentValue = graphics.PreferredBackBufferWidth;
-        int currentValue2 = graphics.PreferredBackBufferHeight;
-        Configuration.Get("DisplayWidth", ref currentValue);
-        Configuration.Get("DisplayHeight", ref currentValue2);
-        SetDisplayMode(currentValue, currentValue2, fullscreen: true);
-    }
-
-    public void UpdateDisplaySettings()
-    {
-        if (startFullscreen)
-        {
-            FullscreenStartup();
-        }
-
-        SetResolution(base.GraphicsDevice.Viewport.Width, base.GraphicsDevice.Viewport.Height);
     }
 
     public static void OpenPlayerSelect(OnPlayerSelected method)
